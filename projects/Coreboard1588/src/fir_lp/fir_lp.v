// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_lp,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-csg324-2,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.350000,HLS_SYN_LAT=22,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=1,HLS_SYN_FF=146,HLS_SYN_LUT=239,HLS_VERSION=2019_2}" *)

module fir_lp (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_V_TDATA,
        din_V_TVALID,
        din_V_TREADY,
        dout_V_TDATA,
        dout_V_TVALID,
        dout_V_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] din_V_TDATA;
input   din_V_TVALID;
output   din_V_TREADY;
output  [31:0] dout_V_TDATA;
output   dout_V_TVALID;
input   dout_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg din_V_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] addr_V_address0;
reg    addr_V_ce0;
reg    addr_V_we0;
wire   [4:0] addr_V_d0;
wire   [4:0] addr_V_q0;
reg   [9:0] x_buf_V_address0;
reg    x_buf_V_ce0;
reg    x_buf_V_we0;
wire   [15:0] x_buf_V_q0;
wire   [9:0] x_buf_V_address1;
reg    x_buf_V_ce1;
wire   [15:0] x_buf_V_q1;
wire   [2:0] coef_V_address0;
reg    coef_V_ce0;
wire   [13:0] coef_V_q0;
reg    din_V_TDATA_blk_n;
reg    dout_V_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [15:0] x_V_fu_181_p1;
reg   [15:0] x_V_reg_365;
reg    ap_block_state1;
wire   [4:0] ch_V_fu_185_p4;
reg   [4:0] ch_V_reg_370;
reg   [4:0] addr_V_addr_reg_379;
reg   [4:0] t_V_reg_384;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_218_p2;
reg   [2:0] i_reg_395;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln35_fu_212_p2;
reg  signed [15:0] x_buf_V_load_1_reg_420;
wire    ap_CS_fsm_state4;
reg  signed [15:0] x_buf_V_load_2_reg_425;
reg  signed [13:0] coef_V_load_reg_430;
wire  signed [31:0] grp_fu_355_p4;
wire    ap_CS_fsm_state5;
reg   [31:0] p_0196_0_reg_158;
reg   [2:0] i_0_reg_170;
wire   [63:0] zext_ln544_fu_195_p1;
wire   [63:0] zext_ln180_fu_207_p1;
wire   [63:0] zext_ln215_1_fu_259_p1;
wire   [63:0] zext_ln215_2_fu_271_p1;
wire   [63:0] zext_ln39_fu_276_p1;
wire   [63:0] zext_ln215_fu_293_p1;
wire   [9:0] tmp_1_fu_200_p3;
wire   [3:0] shl_ln1_fu_224_p3;
wire   [4:0] zext_ln214_fu_232_p1;
wire   [4:0] add_ln214_fu_241_p2;
wire   [4:0] addra_V_1_fu_236_p2;
wire   [9:0] tmp_3_fu_252_p3;
wire   [4:0] addrb_V_fu_247_p2;
wire   [9:0] tmp_4_fu_264_p3;
wire   [4:0] addra_V_fu_281_p2;
wire   [9:0] tmp_2_fu_286_p3;
wire   [28:0] shl_ln_fu_317_p3;
wire  signed [29:0] sext_ln700_fu_325_p1;
wire   [29:0] trunc_ln35_fu_313_p1;
wire   [29:0] temp_V_fu_329_p2;
wire   [15:0] y_V_fu_335_p4;
wire    regslice_both_dout_V_U_apdone_blk;
reg   [6:0] ap_NS_fsm;
wire    regslice_both_din_V_U_apdone_blk;
wire   [31:0] din_V_TDATA_int;
wire    din_V_TVALID_int;
reg    din_V_TREADY_int;
wire    regslice_both_din_V_U_ack_in;
wire   [31:0] dout_V_TDATA_int;
reg    dout_V_TVALID_int;
wire    dout_V_TREADY_int;
wire    regslice_both_dout_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

fir_lp_addr_V #(
    .DataWidth( 5 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
addr_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(addr_V_address0),
    .ce0(addr_V_ce0),
    .we0(addr_V_we0),
    .d0(addr_V_d0),
    .q0(addr_V_q0)
);

fir_lp_x_buf_V #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
x_buf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_buf_V_address0),
    .ce0(x_buf_V_ce0),
    .we0(x_buf_V_we0),
    .d0(x_V_reg_365),
    .q0(x_buf_V_q0),
    .address1(x_buf_V_address1),
    .ce1(x_buf_V_ce1),
    .q1(x_buf_V_q1)
);

fir_lp_coef_V #(
    .DataWidth( 14 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
coef_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(coef_V_address0),
    .ce0(coef_V_ce0),
    .q0(coef_V_q0)
);

fir_lp_ama_addmulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_lp_ama_addmulbkb_U1(
    .din0(x_buf_V_load_2_reg_425),
    .din1(x_buf_V_load_1_reg_420),
    .din2(coef_V_load_reg_430),
    .din3(p_0196_0_reg_158),
    .dout(grp_fu_355_p4)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_din_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(din_V_TDATA),
    .vld_in(din_V_TVALID),
    .ack_in(regslice_both_din_V_U_ack_in),
    .data_out(din_V_TDATA_int),
    .vld_out(din_V_TVALID_int),
    .ack_out(din_V_TREADY_int),
    .apdone_blk(regslice_both_din_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_dout_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dout_V_TDATA_int),
    .vld_in(dout_V_TVALID_int),
    .ack_in(dout_V_TREADY_int),
    .data_out(dout_V_TDATA),
    .vld_out(regslice_both_dout_V_U_vld_out),
    .ack_out(dout_V_TREADY),
    .apdone_blk(regslice_both_dout_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_170 <= i_reg_395;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_reg_170 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_0196_0_reg_158 <= grp_fu_355_p4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_0196_0_reg_158 <= 32'd8192;
    end
end

always @ (posedge ap_clk) begin
    if ((~((din_V_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        addr_V_addr_reg_379 <= zext_ln544_fu_195_p1;
        ch_V_reg_370 <= {{din_V_TDATA_int[20:16]}};
        x_V_reg_365 <= x_V_fu_181_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coef_V_load_reg_430 <= coef_V_q0;
        x_buf_V_load_1_reg_420 <= x_buf_V_q0;
        x_buf_V_load_2_reg_425 <= x_buf_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_395 <= i_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_reg_384 <= addr_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        addr_V_address0 = addr_V_addr_reg_379;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        addr_V_address0 = zext_ln544_fu_195_p1;
    end else begin
        addr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((din_V_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        addr_V_ce0 = 1'b1;
    end else begin
        addr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln35_fu_212_p2 == 1'd1))) begin
        addr_V_we0 = 1'b1;
    end else begin
        addr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((dout_V_TREADY_int == 1'b0) | (regslice_both_dout_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((dout_V_TREADY_int == 1'b0) | (regslice_both_dout_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        coef_V_ce0 = 1'b1;
    end else begin
        coef_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        din_V_TDATA_blk_n = din_V_TVALID_int;
    end else begin
        din_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_din_V_U_ack_in == 1'b1) & (din_V_TVALID == 1'b1))) begin
        din_V_TREADY = 1'b1;
    end else begin
        din_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((din_V_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        din_V_TREADY_int = 1'b1;
    end else begin
        din_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        dout_V_TDATA_blk_n = dout_V_TREADY_int;
    end else begin
        dout_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((dout_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        dout_V_TVALID_int = 1'b1;
    end else begin
        dout_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln35_fu_212_p2 == 1'd1))) begin
        x_buf_V_address0 = zext_ln215_fu_293_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln35_fu_212_p2 == 1'd0))) begin
        x_buf_V_address0 = zext_ln215_1_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_buf_V_address0 = zext_ln180_fu_207_p1;
    end else begin
        x_buf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln35_fu_212_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln35_fu_212_p2 == 1'd0)))) begin
        x_buf_V_ce0 = 1'b1;
    end else begin
        x_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_buf_V_ce1 = 1'b1;
    end else begin
        x_buf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_buf_V_we0 = 1'b1;
    end else begin
        x_buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((din_V_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln35_fu_212_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((dout_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((dout_V_TREADY_int == 1'b0) | (regslice_both_dout_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_fu_241_p2 = (zext_ln214_fu_232_p1 + 5'd10);

assign addr_V_d0 = (5'd1 + t_V_reg_384);

assign addra_V_1_fu_236_p2 = (t_V_reg_384 - zext_ln214_fu_232_p1);

assign addra_V_fu_281_p2 = ($signed(5'd21) + $signed(t_V_reg_384));

assign addrb_V_fu_247_p2 = (t_V_reg_384 + add_ln214_fu_241_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((din_V_TVALID_int == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ch_V_fu_185_p4 = {{din_V_TDATA_int[20:16]}};

assign coef_V_address0 = zext_ln39_fu_276_p1;

assign dout_V_TDATA_int = {{{{11'd0}, {ch_V_reg_370}}}, {y_V_fu_335_p4}};

assign dout_V_TVALID = regslice_both_dout_V_U_vld_out;

assign i_fu_218_p2 = (i_0_reg_170 + 3'd1);

assign icmp_ln35_fu_212_p2 = ((i_0_reg_170 == 3'd6) ? 1'b1 : 1'b0);

assign sext_ln700_fu_325_p1 = $signed(shl_ln_fu_317_p3);

assign shl_ln1_fu_224_p3 = {{i_0_reg_170}, {1'd0}};

assign shl_ln_fu_317_p3 = {{x_buf_V_q0}, {13'd0}};

assign temp_V_fu_329_p2 = ($signed(sext_ln700_fu_325_p1) + $signed(trunc_ln35_fu_313_p1));

assign tmp_1_fu_200_p3 = {{ch_V_reg_370}, {addr_V_q0}};

assign tmp_2_fu_286_p3 = {{ch_V_reg_370}, {addra_V_fu_281_p2}};

assign tmp_3_fu_252_p3 = {{ch_V_reg_370}, {addra_V_1_fu_236_p2}};

assign tmp_4_fu_264_p3 = {{ch_V_reg_370}, {addrb_V_fu_247_p2}};

assign trunc_ln35_fu_313_p1 = p_0196_0_reg_158[29:0];

assign x_V_fu_181_p1 = din_V_TDATA_int[15:0];

assign x_buf_V_address1 = zext_ln215_2_fu_271_p1;

assign y_V_fu_335_p4 = {{temp_V_fu_329_p2[29:14]}};

assign zext_ln180_fu_207_p1 = tmp_1_fu_200_p3;

assign zext_ln214_fu_232_p1 = shl_ln1_fu_224_p3;

assign zext_ln215_1_fu_259_p1 = tmp_3_fu_252_p3;

assign zext_ln215_2_fu_271_p1 = tmp_4_fu_264_p3;

assign zext_ln215_fu_293_p1 = tmp_2_fu_286_p3;

assign zext_ln39_fu_276_p1 = i_0_reg_170;

assign zext_ln544_fu_195_p1 = ch_V_fu_185_p4;

endmodule //fir_lp
